package com.ydk.book.persistence.entity;

// Generated Jan 25, 2010 9:49:58 AM by Hibernate Tools 3.2.4.GA

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.JoinTable;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.JoinColumn;
import javax.persistence.TableGenerator;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.annotations.GenericGenerator;
import org.springframework.beans.support.MutableSortDefinition;
import org.springframework.beans.support.PropertyComparator;
import org.springframework.core.style.ToStringCreator;
import org.springframework.transaction.annotation.Transactional;
import com.ydk.account.persistence.entity.*;



/**
 * Owners generated by hbm2java
 */
@Entity
@Table(name = "interview", catalog = "ydk")
public class Interview extends Subject implements java.io.Serializable {


	private String reporter;
	private String interviewer;
	private String editor;
	private String location;
	private String content;
	private Boolean isQa;
	private InterviewCategory interviewCategory;

	public Interview() {
		super();
		this.subjectType = this.SUBJECT_TYPE_INTERVIEW;
	}
	
	public Interview(String title, String interviewer, Date date) {
		super();
		this.title = title;
		this.subjectType = this.SUBJECT_TYPE_INTERVIEW;
		this.date = date;
		this.interviewer = interviewer;
	}
	

	public Interview(Long id, String title, String subjectType, Date date,
			Integer order, Boolean isNew, Boolean recommanded, Boolean visible,
			String introduction, String titleImage, ArrayList<String> images,
			Book book, String reporter, String interviewer, String editor,
			String location, String content, Boolean isQa,
			InterviewCategory interviewCategory) {
		this.id = id;
		this.title = title;
		this.subjectType = subjectType;
		this.date = date;
		this.order = order;
		this.isNew = isNew;
		this.recommanded = recommanded;
		this.visible = visible;
		this.introduction = introduction;
		this.titleImage = titleImage;
		this.images = images;
		this.book = book;
		this.reporter = reporter;
		this.interviewer = interviewer;
		this.editor = editor;
		this.location = location;
		this.content = content;
		this.isQa = isQa;
		this.interviewCategory = interviewCategory;
	}

	@Column(name = "reporter")
	public String getReporter() {
		return this.reporter;
	}
	public void setReporter(String reporter) {
		this.reporter = reporter;
	}
	
	@Column(name = "interviewer")
	public String getInterviewer() {
		return this.interviewer;
	}
	public void setInterviewer(String interviewer) {
		this.interviewer = interviewer;
	}
	
	@Column(name = "editor")
	public String getEditor() {
		return this.editor;
	}
	public void setEditor(String editor) {
		this.editor = editor;
	}
	
	@Column(name = "location")
	public String getLocation() {
		return this.location;
	}
	public void setLocation(String location) {
		this.location = location;
	}
	
	@Column(name = "content")
	public String getContent() {
		return this.content;
	}
	public void setContent(String content) {
		this.content = content;
	}
	
	@Column(name = "isQa")
	public Boolean getIsQa() {
		return this.isQa;
	}
	public void setIsQa(Boolean isQa) {
		this.isQa = isQa;
	}
	
//	@OneToOne(cascade= CascadeType.ALL, fetch = FetchType.LAZY)
//	@JoinTable(name = "interview_title_img",
//        joinColumns = 
//        	@JoinColumn(name="subject_id"),
//        inverseJoinColumns = 
//        	@JoinColumn(name="image_id")
//    )
//	public FileDescriptor getTitleImage() {
//		return titleImage;
//	}
//	public void setTitleImage(FileDescriptor titleImage) {
//		this.titleImage = titleImage;
//	}
	
	
//	@OneToMany(fetch = FetchType.LAZY, 
//			cascade = {CascadeType.PERSIST, CascadeType.REMOVE})
//    @JoinTable(
//            name="interview_images",
//            joinColumns = @JoinColumn( name="subject_id"),
//            inverseJoinColumns = @JoinColumn( name="image_id")
//    )
//    public List<FileDescriptor> getImages()
//    {
//		return this.images;
//    }
//	public void setImages(List<FileDescriptor> images) {
//		this.images = images;
//	}
	
	@ManyToOne(fetch = FetchType.LAZY, 
			cascade = {CascadeType.PERSIST})
	@JoinTable(
            name="book_interviews",
            joinColumns = @JoinColumn( name="subject_pk"),
            inverseJoinColumns = @JoinColumn( name="book_pk")
    )
	public Book getBook() {
		return this.book;
	}
	public void setBook(Book book) {
		this.book = book;
	}

	/**
	 * @return the interviewCategory
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "interview_category", nullable = false)
	public InterviewCategory getInterviewCategory() {
		return interviewCategory;
	}
	public void setInterviewCategory(InterviewCategory interviewCategory) {
		this.interviewCategory = interviewCategory;
	}
	
	
	@Transient
	public Interview setToPlainObject(Interview instance)
	{
		//Get self
		getTitle();
		Interview result = new Interview();
		result.cloneInstance(this);
		
		//Eager get @ManytoOne, @OnetoOne
		if (getBook() != null)
		{
			result.setBook(
					getBook().setToPlainObjectQuick(getBook()));
		}
		
		result.setInterviewCategory(
				getInterviewCategory().setToPlainObject(getInterviewCategory()));
		
//		if (getTitleImage() != null)
//		{
//			setTitleImage(
//					getTitleImage().setToPlainObjectQuick(getTitleImage()));
//		}
		
				
		//Null oneToMany;
//		setImages(null);
		

		return result;
	}
	
	@Transient
	public Interview setToPlainObjectQuick(Interview instance)
	{
		//Get self
		getTitle();
		Interview result = new Interview();
		result.cloneInstance(this);
		//Eager get @ManytoOne, @OnetoOne
		result.setBook(null);
		
		result.setInterviewCategory(
				getInterviewCategory().setToPlainObject(getInterviewCategory()));
		
//		setTitleImage(null);
		
		//Null oneToMany;
//		setImages(null);
		

		return result;
	}
	
	
	public void cloneInstance(Interview instance) {
		id = instance.id;
		title = instance.title;
		subjectType = instance.subjectType;
		date = instance.date;
		order = instance.order;
		isNew = instance.isNew;
		recommanded = instance.recommanded;
		visible = instance.visible;
		introduction = instance.introduction;
		titleImage = instance.titleImage;
		images = instance.images;
		book = instance.book;
		reporter = instance.reporter;
		interviewer = instance.interviewer;
		editor = instance.editor;
		location = instance.location;
		content = instance.content;
		isQa = instance.isQa;
		interviewCategory = instance.interviewCategory;
	}
	
	
}
