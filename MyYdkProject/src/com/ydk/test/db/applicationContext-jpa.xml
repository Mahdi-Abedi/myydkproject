<?xml version="1.0" encoding="UTF-8"?>
<!--
	Application context definition for MyYdkProject on JPA.
-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:context="http://www.springframework.org/schema/context" xmlns:jee="http://www.springframework.org/schema/jee"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xsi:schemaLocation="
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.5.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">

	<!-- ========================= RESOURCE DEFINITIONS ========================= -->

	<!--
		Activates a load-time weaver for the context. Any bean within the context that
		implements LoadTimeWeaverAware (such as LocalContainerEntityManagerFactoryBean)
		will receive a reference to the autodetected load-time weaver.
	-->
	<context:load-time-weaver/>

	<!-- Configurer that replaces ${...} placeholders with values from a properties file -->
	<!-- (in this case, JDBC-related settings for the dataSource definition below) 
	<context:property-placeholder location="classpath:jdbc.properties"/>
	<context:property-placeholder location="classpath:mail.properties"/>
	-->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:mail.properties</value>
			</list>
		</property>
	</bean>

	<!-- DriverManagerDataSource is a local DataSource that works in any environment. -->
	<!-- Note that DriverManagerDataSource does not pool connections and is therefore not intended for production. -->
	<!-- See applicationContext-jdbc.xml for an example of using Commons DBCP BasicDataSource as an alternative. -->
	<!-- See the Image Database sample application for an example of using C3P0 ComboPooledDataSource as alternative. -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"
			p:driverClassName="${jdbc.driverClassName}" p:url="${jdbc.url}" p:username="${jdbc.username}"
			p:password="${jdbc.password}"/>

	<!-- JNDI DataSource for JEE environments -->
	<!--
	<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/myydkproject"/>
	-->

	<!-- JPA EntityManagerFactory -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
			p:dataSource-ref="dataSource">
		<property name="jpaVendorAdapter">
			<!--  
			<bean class="org.springframework.orm.jpa.vendor.TopLinkJpaVendorAdapter"
					p:databasePlatform="${jpa.databasePlatform}" p:showSql="${jpa.showSql}"/>
			-->
			<!--
			<bean class="org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter"
					p:database="${jpa.database}" p:showSql="${jpa.showSql}"/>
			-->
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
					p:database="${jpa.database}" p:showSql="${jpa.showSql}"/>

		</property>
	</bean>

	<!-- Transaction manager for a single JPA EntityManagerFactory (alternative to JTA) -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
			p:entityManagerFactory-ref="entityManagerFactory"/>


	<!-- Publishing session factory to be able view statistics 
	<bean id="sessionFactory" factory-bean="entityManagerFactory" factory-method="getSessionFactory" />
	-->
	<!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->

	<!--
		Activates various annotations to be detected in bean classes: Spring's
		@Required and @Autowired, as well as JSR 250's @PostConstruct,
		@PreDestroy and @Resource (if available) and JPA's @PersistenceContext
		and @PersistenceUnit (if available).
	-->
	<context:annotation-config/>

	<!--
		Instruct Spring to retrieve and apply @AspectJ aspects which are defined
		as beans in this context (such as the UsageLogAspect below).
	-->
	<aop:aspectj-autoproxy/>

	<!--
		Instruct Spring to perform declarative transaction management
		automatically on annotated classes.
	-->
	<tx:annotation-driven/>

	<!--
		Simply defining this bean will cause requests to accounts names to be saved.
		Spring automatically deploys the @Aspect when AspectJ autoproxying is enabled.
		Note that we can dependency inject this bean like any other bean.
	-->
	<!-- -->
	<bean class="com.ydk.account.aspects.UsageLogAspect" p:historySize="300"/>
	


	<!--
		PostProcessors to perform exception translation on @Repository classes (from native
		exceptions such as JPA PersistenceExceptions to Spring's DataAccessException hierarchy).
	-->
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

	<!--
		Will automatically be transactional due to @Transactional.
		EntityManager will be auto-injected due to @PersistenceContext.
		PersistenceExceptions will be auto-translated due to @Repository.
	-->
	
	<!-- Adding your subsystem Database Manager here -->
	<bean id="accountDbMngr" class="com.ydk.account.persistence.AccountDbMngrImpl"/>
	<bean id="bookDbMngr" class="com.ydk.book.persistence.BookDbMngrImpl"/>
	<bean id="keyManager" class = "com.ydk.web.KeyManager"/>
	<bean id="searchManager" class = "com.ydk.search.SimpleSearchManager"/>
	
	
	<!-- MailSender implementation for JavaMail -->
	<!-- our Authenticator implementation -->
	<bean id="smtpAuthenticator" class="com.ydk.service.mail.SmtpAuthenticator">
		<constructor-arg value="${mail.account}" />
		<constructor-arg value="${mail.password}" />
	</bean>
    <!-- now setup an authenticated session 	-->
	<bean id="mailSession" class="javax.mail.Session" factory-method="getInstance">
		<constructor-arg>
			<props>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.socketFactory.port">465</prop>
				<prop key="mail.smtp.socketFactory.class">
					javax.net.ssl.SSLSocketFactory
				</prop>
				<prop key="mail.smtp.socketFactory.fallback">
					false
				</prop>
			</props>
		</constructor-arg>
		<constructor-arg ref="smtpAuthenticator"/>
	</bean>
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${mail.host}" />
		<!-- <property name="session" ref="mailSession" /> -->
		
	</bean>
	<bean id="mailService" class="com.ydk.service.mail.SimpleYdkEmailService">
		<property name="mailSender" ref="mailSender"/>
		<property name="subjectSuffix" value="${mail.subject.suffix}"/>
		<property name="subjectPrefix" value="${mail.subject.prefix}"/>
	</bean>
	
	<!--End of MailSender implementation for JavaMail -->
	<!-- Spring Threading Pool Support -->
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
	  <property name="corePoolSize" value="5" />
	  <property name="maxPoolSize" value="10" />
	  <property name="queueCapacity" value="25" />
	</bean>
	
	
	<bean id="fileManager" class = "com.ydk.web.FileManager">
		<property name="basePath" value="O:\ydkFiles\"/>
		<property name="paths">
			<props>
				<prop key="interview" >interview\</prop>
				<prop key="bookReview">bookReview\</prop>
				<prop key="bookNews">bookNews\</prop>
				<prop key="book">book\</prop>
				<prop key="ydkAccount">ydkAccount\</prop>
				<prop key="reader">reader\</prop>
				<prop key="event">event\</prop>
			</props>
		</property>
	</bean>
	
	<!--End of Spring Threading Pool Support -->
	


</beans>
